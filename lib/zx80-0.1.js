/**

ZX Javascript

Copyright 2017.
Steven Goodwin. 

This file is released under the GNU General Public License Version 3.

Please see the licensing conditions for details.

The latest version is generally available at:
	https://github.com/marquisdegeek/zxjavascript

See it at:
	https://marquisdegeek.com/code_zxjavascript
*/
// START 
// START src/js/system.js
var zx = {};

// START src/js/zx80/rom.js
zx.rom=[0x21,0xFF,0x7F,0x3E,0x3F,0xC3,0x61,0x02,0xE1,0x6E,0xFD,0xCB,0x00,0x7E,0x18,0x03,0xC3,0x60,0x05,0xC8,0xFD,0x75,0x00,0xC9,0x18,0x38,0x2A,0x26,0x40,0x7E,0xA7,0xC0,0xCD,0x52,0x00,0x18,0xF9,0xCD,0x55,0x00,0xCD,0x1A,0x00,0x06,0x00,0xC3,0xE1,0x09,0xCD,0x4F,0x09,0xD0,0xC5,0xC3,0xF3,0x0C,0x0D,0xC2,0x45,0x00,0xE1,0x05,0xC8,0xCB,0xD9,0xED,0x4F,0xFB,0xE9,0xD1,0xC8,0x18,0xF8,0xCD,0x25,0x00,0x7E,0xFE,0xD9,0xC2,0xAE,0x08,0x2A,0x26,0x40,0x23,0x22,0x26,0x40,0x7E,0xFE,0xB0,0xC0,0x22,0x04,0x40,0xFD,0xCB,0x19,0x7E,0x28,0xEF,0xFD,0xCB,0x01,0xD6,0x18,0xE9,0x3F,0x3D,0x28,0x3B,0x26,0x38,0x29,0x2B,0x2C,0x36,0x3C,0x2A,0x37,0x39,0x1D,0x1E,0x1F,0x20,0x21,0x1C,0x25,0x24,0x23,0x22,0x35,0x34,0x2E,0x3A,0x3E,0x76,0x31,0x30,0x2F,0x2D,0x00,0x1B,0x32,0x33,0x27,0x0E,0xD7,0x0F,0xDF,0x09,0x08,0x06,0x07,0x0B,0x02,0x03,0x04,0x05,0x0A,0xDB,0xE0,0xD5,0xD6,0x72,0x77,0x74,0x73,0x70,0x71,0xDE,0xD9,0xDA,0x0D,0x01,0x75,0xE3,0xDD,0xDC,0xE2,0x0C,0xD8,0xE4,0xE5,0xE1,0xD4,0x8F,0x81,0x39,0x2D,0x2A,0xB3,0x39,0xB4,0x99,0x9A,0x91,0x90,0x33,0x34,0xB9,0x92,0x93,0x94,0x95,0x26,0x33,0xA9,0x34,0xB7,0x14,0x94,0x96,0x97,0x98,0x31,0x2E,0x38,0xB9,0x37,0x2A,0x39,0x3A,0x37,0xB3,0x28,0x31,0xB8,0x29,0x2E,0xB2,0x38,0x26,0x3B,0xAA,0x2B,0x34,0xB7,0x2C,0x34,0x00,0x39,0xB4,0x35,0x34,0x30,0xAA,0x2E,0x33,0x35,0x3A,0xB9,0x37,0x26,0x33,0x29,0x34,0x32,0x2E,0x38,0xAA,0x31,0x2A,0xB9,0x8F,0x8F,0x33,0x2A,0x3D,0xB9,0x35,0x37,0x2E,0x33,0xB9,0x8F,0x33,0x2A,0xBC,0x37,0x3A,0xB3,0x38,0x39,0x34,0xB5,0x28,0x34,0x33,0x39,0x2E,0x33,0x3A,0xAA,0x2E,0xAB,0x2C,0x34,0x00,0x38,0x3A,0xA7,0x31,0x34,0x26,0xA9,0x28,0x31,0x2A,0x26,0xB7,0x37,0x2A,0xB2,0x8F,0xCD,0xAD,0x01,0x06,0x08,0x10,0xFE,0x2A,0x1E,0x40,0x23,0x22,0x1E,0x40,0x21,0xFF,0xFF,0x06,0xFE,0x48,0xED,0x78,0xF6,0x01,0xF6,0xE0,0x57,0x2F,0xFE,0x01,0x9F,0xB0,0xA5,0x6F,0x7C,0xA2,0x67,0xCB,0x00,0xED,0x78,0x38,0xED,0x1F,0xCB,0x14,0x17,0x17,0x17,0x9F,0xE6,0x18,0xC6,0x20,0x32,0x23,0x40,0xED,0x4B,0x26,0x40,0x22,0x26,0x40,0x78,0xC6,0x02,0xED,0x42,0xEB,0x21,0x22,0x40,0x7E,0xB2,0xB3,0xC8,0x78,0xFE,0xFE,0x9F,0x06,0x1F,0xB6,0xA0,0x1F,0x77,0x05,0x10,0xFE,0xD3,0xFF,0x3E,0xEC,0x06,0x19,0x2A,0x0C,0x40,0xCB,0xFC,0xCD,0xAD,0x01,0x3E,0xF3,0x04,0x2B,0xFD,0x35,0x23,0x18,0x8F,0xFD,0x4E,0x23,0xED,0x4F,0x3E,0xDD,0xFB,0xE9,0xD1,0x11,0xCB,0x12,0x3E,0x7F,0xDB,0xFE,0x1F,0x30,0x42,0x10,0xFE,0x1B,0x7A,0xB3,0x20,0xF2,0x21,0x00,0x40,0x11,0x08,0xF8,0xCB,0x06,0x9F,0xE6,0x05,0xC6,0x04,0x4F,0xD3,0xFF,0x06,0x24,0x10,0xFE,0x3E,0x7F,0xDB,0xFE,0x06,0x23,0x10,0xFE,0x0D,0x20,0xEF,0x42,0x00,0x10,0xFD,0x16,0xFE,0x1D,0x20,0xDE,0x1F,0x30,0x10,0xCD,0xF8,0x01,0x18,0xD3,0x23,0xEB,0x2A,0x0A,0x40,0x37,0xED,0x52,0xEB,0xD0,0xE1,0xC3,0x83,0x02,0xD1,0x11,0x12,0x57,0x3E,0x7F,0xDB,0xFE,0x1F,0x30,0xF2,0x17,0x17,0x38,0xF2,0x1B,0x7A,0xB3,0x20,0xF0,0xFD,0x34,0x0B,0x21,0x00,0x40,0x1E,0x08,0x3E,0x7F,0xDB,0xFE,0x1F,0x30,0x24,0x17,0x17,0x30,0xF5,0x0E,0x94,0x06,0x1A,0x0D,0xDB,0xFE,0x17,0xCB,0x79,0x79,0x38,0xF5,0x10,0xF5,0x20,0x04,0xFE,0x56,0x30,0xE0,0x3F,0xCB,0x16,0x1D,0x20,0xDA,0xCD,0xF8,0x01,0x18,0xD3,0x15,0xF2,0x00,0x00,0xFD,0x35,0x0B,0x18,0xAD,0xCB,0xB8,0xCB,0xB0,0xED,0x43,0x06,0x40,0xC1,0x18,0x22,0x36,0x01,0x2B,0xBC,0x20,0xFA,0x23,0x35,0x28,0xFC,0xF9,0xF5,0x3E,0x0E,0xED,0x47,0xED,0x56,0xFD,0x21,0x00,0x40,0x21,0x28,0x40,0x22,0x08,0x40,0x36,0x80,0x23,0x22,0x0A,0x40,0x2A,0x0A,0x40,0x36,0xB0,0x23,0x36,0x76,0x23,0x22,0x0C,0x40,0xFD,0x36,0x12,0x02,0xCD,0x47,0x07,0xEB,0x78,0xFD,0x96,0x12,0x38,0x5A,0x3C,0x47,0xD9,0x2A,0x06,0x40,0xED,0x5B,0x13,0x40,0xED,0x52,0xEB,0x30,0x04,0x19,0x22,0x13,0x40,0xCD,0x0A,0x06,0x1E,0x00,0xCD,0xF7,0x04,0x38,0xFB,0x1D,0x20,0x33,0xE5,0x2A,0x06,0x40,0xCD,0x0A,0x06,0xE1,0xA7,0xED,0x52,0x21,0x13,0x40,0x30,0x0B,0xEB,0x7E,0x23,0xED,0xA0,0x12,0x18,0xBE,0x21,0x06,0x40,0x5E,0x23,0x56,0xE5,0xEB,0x23,0xCD,0x0A,0x06,0xCD,0xC2,0x03,0xE1,0xFD,0xCB,0x19,0x6E,0x20,0x0C,0x72,0x2B,0x73,0x18,0xA3,0xCD,0xC2,0x05,0xED,0x53,0x0E,0x40,0xFD,0x36,0x01,0x01,0x2A,0x0A,0x40,0xCD,0xBE,0x07,0xED,0x5B,0x0E,0x40,0xFD,0x46,0x12,0x0E,0x01,0xD9,0x2A,0x0A,0x40,0xCD,0x12,0x05,0x38,0x0A,0x21,0x12,0x40,0x34,0x3E,0x18,0xBE,0x30,0xB7,0x77,0xCD,0xC2,0x05,0xCD,0x3F,0x01,0xCB,0x28,0x9F,0xF6,0x26,0x2E,0x05,0x95,0x85,0x37,0xCB,0x19,0x38,0xFA,0x0C,0x20,0xC3,0x48,0x2D,0x2E,0x01,0x20,0xF1,0x21,0x6B,0x00,0x5F,0x19,0x7E,0xFD,0xCB,0x01,0x56,0x28,0x07,0xC6,0xC0,0xFE,0xE6,0x30,0x01,0x7E,0xFE,0xC0,0xEA,0x5E,0x03,0x2A,0x04,0x40,0x01,0x01,0x00,0xCD,0xD5,0x05,0x12,0x18,0x99,0x5F,0x21,0x92,0x02,0x19,0x19,0x4E,0x23,0x46,0xC5,0x2A,0x04,0x40,0xC9,0x01,0x01,0x00,0xC3,0x66,0x06,0xA9,0x03,0xD5,0x02,0x82,0x03,0x87,0x03,0xB9,0x03,0xCB,0x03,0x08,0x04,0x95,0x03,0xCD,0x9E,0x03,0x2B,0x2B,0x23,0x7E,0xFE,0x76,0x28,0x1A,0x36,0xB0,0x2A,0x04,0x40,0x77,0x18,0xC7,0xCD,0x9E,0x03,0x2B,0xCD,0x6C,0x03,0x18,0xBE,0xED,0x5B,0x0A,0x40,0x1A,0xFE,0xB0,0xC0,0xD1,0x18,0xB3,0x2A,0x06,0x40,0xCD,0x0A,0x06,0xEB,0xCD,0xC2,0x03,0x21,0x07,0x40,0xC3,0xE5,0x02,0x11,0x00,0x00,0x18,0xF5,0xEB,0x11,0xBA,0x03,0x7E,0xE6,0xC0,0x20,0xF7,0x56,0x23,0x5E,0xC9,0x0E,0x00,0xED,0x5B,0x0A,0x40,0xD9,0x2A,0x06,0x40,0xCD,0x0A,0x06,0xCD,0xC2,0x03,0x7A,0xB3,0xCA,0x83,0x02,0x2B,0xCD,0xBF,0x06,0x2B,0xCD,0x24,0x06,0x23,0x23,0x0B,0x0B,0xD9,0xD5,0xD9,0xD1,0x3E,0xB0,0x12,0x13,0xE5,0x21,0x22,0x00,0x19,0x09,0xED,0x72,0x30,0xA9,0xE1,0xED,0xB0,0xED,0x53,0x0C,0x40,0xC3,0x93,0x02,0x2A,0x15,0x40,0x7C,0xB5,0x20,0x98,0x2A,0x04,0x40,0xCD,0x6C,0x03,0x2A,0x0A,0x40,0x22,0x26,0x40,0xCD,0x1A,0x00,0xFD,0xCB,0x19,0x6E,0x20,0x18,0xCD,0x79,0x06,0xD9,0x7C,0xB5,0xC2,0xBA,0x04,0x2B,0x2B,0x22,0x02,0x40,0xCD,0x47,0x07,0xD9,0x7E,0xFE,0x76,0xCA,0x83,0x02,0xFD,0x36,0x00,0xFF,0xFD,0x36,0x01,0x88,0xCD,0xBE,0x07,0xCD,0x0A,0x0D,0xED,0x5B,0x02,0x40,0x21,0x19,0x40,0xCB,0x6E,0x28,0x03,0xCB,0xAE,0x13,0xFD,0xCB,0x00,0x7E,0x28,0x2A,0x21,0x01,0x40,0xCB,0x5E,0xCB,0x9E,0x2A,0x26,0x40,0x23,0x28,0x09,0xEB,0x7C,0xE6,0xC0,0x20,0x17,0xCD,0x0A,0x06,0x7E,0xE6,0xC0,0x20,0x0F,0x56,0x23,0x5E,0xED,0x53,0x02,0x40,0x23,0x3E,0x7F,0xDB,0xFE,0x1F,0x38,0xBC,0xCD,0xE0,0x06,0xCD,0xC2,0x05,0x01,0x20,0x01,0xD9,0x3A,0x00,0x40,0xED,0x4B,0x02,0x40,0x3C,0x28,0x0C,0xFE,0x09,0x20,0x01,0x03,0xED,0x43,0x17,0x40,0x20,0x01,0x0B,0xCD,0x56,0x05,0x3E,0x15,0xD7,0xCD,0xA1,0x06,0xCD,0xC2,0x05,0xCD,0x3F,0x01,0xC3,0x83,0x02,0x22,0x06,0x40,0xD9,0xEB,0xCD,0x47,0x07,0xED,0x52,0xD9,0xCD,0x0A,0x06,0xE5,0x20,0x06,0xCD,0x24,0x06,0xCD,0x66,0x06,0xD9,0x23,0x44,0x4D,0x7D,0xD6,0x03,0xB4,0xC4,0x4F,0x09,0xE1,0x30,0x15,0xC5,0x2B,0xCD,0xD5,0x05,0x13,0x2A,0x0C,0x40,0x2B,0xC1,0x0B,0xED,0xB8,0x2A,0x06,0x40,0xEB,0x72,0x23,0x73,0xC3,0x83,0x02,0xED,0x4B,0x06,0x40,0xCD,0x1C,0x06,0x16,0x97,0x28,0x05,0x11,0x00,0x00,0xCB,0x13,0x7E,0xFE,0x40,0xDC,0xBF,0x06,0xD0,0x23,0x7A,0xD7,0xD0,0xFD,0xCB,0x01,0xC6,0xED,0x4B,0x15,0x40,0xA7,0xED,0x42,0x20,0x04,0x3E,0xB8,0xD7,0xC8,0x09,0x7E,0x23,0xFE,0xB0,0x28,0x12,0xFE,0xC0,0xEA,0x59,0x05,0x38,0x05,0xCD,0x84,0x05,0x18,0x03,0xCD,0x59,0x05,0xD0,0x18,0xDA,0xFD,0xCB,0x01,0x56,0x20,0x01,0x3C,0xD7,0x18,0xF3,0x7B,0x07,0x0F,0xD8,0x18,0x10,0xAF,0x09,0x3C,0x38,0xFC,0xED,0x42,0x3D,0x28,0xF0,0x1E,0x1C,0x83,0xA7,0x28,0x04,0xFD,0xCB,0x01,0x86,0xD9,0x67,0x17,0x17,0x0D,0x30,0x02,0x0E,0x00,0xFA,0x74,0x05,0x38,0x0E,0x20,0x0C,0x3E,0x76,0x12,0x13,0x38,0x02,0x0E,0x20,0xA7,0x05,0x28,0x06,0x68,0xCD,0x58,0x09,0x12,0x13,0xD9,0xC9,0xCD,0xA8,0x05,0x30,0x09,0xFD,0xCB,0x01,0x46,0x20,0x03,0xAF,0xD7,0xD0,0x0A,0xE6,0x3F,0xCD,0x59,0x05,0xD0,0x0A,0x03,0x87,0x30,0xF4,0xFE,0x38,0xD8,0xAF,0xFD,0xCB,0x01,0xC6,0x18,0xB8,0xE5,0x21,0xBA,0x00,0x96,0x23,0x38,0x09,0x3C,0x47,0xCB,0x7E,0x23,0x28,0xFB,0x10,0xF9,0x44,0x4D,0xE1,0x0A,0xE6,0x3F,0xC6,0xE4,0xC9,0xD9,0xAF,0xB8,0x28,0x09,0xB9,0x3E,0x76,0x28,0x02,0x12,0x13,0x10,0xFC,0xED,0x53,0x10,0x40,0xC9,0xCD,0xDF,0x05,0x2A,0x10,0x40,0xEB,0xED,0xB8,0xC9,0xF5,0xE5,0x21,0x08,0x40,0x3E,0x05,0x5E,0x23,0x56,0xE3,0xA7,0xED,0x52,0x19,0xE3,0x30,0x09,0xD5,0xEB,0x09,0xEB,0x72,0x2B,0x73,0x23,0xD1,0x23,0x3D,0x20,0xE8,0xEB,0xD1,0xF1,0xA7,0xED,0x52,0x44,0x4D,0x03,0x19,0xEB,0xC9,0xE5,0x21,0x28,0x40,0x54,0x5D,0xC1,0xEB,0xCD,0x1C,0x06,0xD0,0xC5,0xCD,0x24,0x06,0x18,0xF4,0x7E,0xB8,0xC0,0x23,0x7E,0x2B,0xB9,0xC9,0xE5,0x7E,0x87,0xFA,0x35,0x06,0x38,0x17,0x23,0x3E,0x76,0x23,0x47,0xED,0xB1,0x18,0x1D,0x01,0x02,0x00,0x38,0x01,0x48,0x17,0x17,0x23,0x7E,0x30,0xFB,0x18,0x0C,0xE6,0x40,0x3E,0x01,0x28,0xE6,0x23,0x7E,0x23,0x06,0x00,0x4F,0x03,0x09,0x09,0xD1,0xA7,0xED,0x52,0x44,0x4D,0x19,0xEB,0xC9,0x2A,0x0A,0x40,0x2B,0xED,0x5B,0x08,0x40,0xCD,0x53,0x06,0xC5,0x78,0x2F,0x47,0x79,0x2F,0x4F,0x03,0xCD,0xDF,0x05,0xEB,0xE1,0x19,0xD5,0xED,0xB0,0xE1,0xC9,0x7E,0xD9,0x21,0x00,0x00,0x44,0xD6,0x1C,0x38,0x17,0xFE,0x0A,0x30,0x13,0x4F,0x3E,0x0D,0xBC,0x30,0x01,0x67,0x54,0x5D,0x29,0x29,0x19,0x29,0x09,0xD9,0xDF,0xD9,0x18,0xE5,0x7C,0x22,0x22,0x40,0xD9,0x17,0xC9,0xD5,0xE5,0x60,0x69,0xCB,0x78,0x28,0x0C,0x3E,0x12,0xCD,0x59,0x05,0x30,0x2D,0x21,0x01,0x00,0xED,0x42,0x1E,0xFF,0x01,0xF0,0xD8,0xCD,0x4C,0x05,0x18,0x09,0xD5,0x56,0x23,0x5E,0xE5,0xEB,0x1E,0x00,0x37,0x01,0x18,0xFC,0xDC,0x4C,0x05,0x01,0x9C,0xFF,0xDC,0x4C,0x05,0x0E,0xF6,0xDC,0x4C,0x05,0x7D,0xDC,0x56,0x05,0xE1,0xD1,0xC9,0xFD,0xCB,0x01,0x7E,0xE1,0xC8,0xD9,0xED,0x5B,0x0E,0x40,0xED,0x4B,0x24,0x40,0xD9,0xE9,0xFD,0xCB,0x00,0x7E,0xC8,0xCD,0xE0,0x06,0x2A,0x22,0x40,0xFD,0xCB,0x01,0x76,0x28,0x0A,0x44,0x4D,0xCD,0xA1,0x06,0x18,0x1A,0xD7,0x30,0x19,0x7E,0x23,0xFE,0x01,0x28,0x28,0xCB,0x77,0x28,0xF3,0xCD,0x84,0x05,0x18,0xEF,0xCD,0xE0,0x06,0x3E,0x76,0xCD,0x59,0x05,0x38,0x15,0xCF,0x04,0xCD,0xE0,0x06,0xFD,0xCB,0x01,0xC6,0xAF,0xD7,0x30,0xF3,0xD9,0x79,0xD9,0x3D,0xE6,0x07,0x20,0xF4,0xD9,0xEB,0xED,0x43,0x24,0x40,0x22,0x0E,0x40,0x22,0x10,0x40,0xC9,0x2A,0x0C,0x40,0x36,0x76,0x23,0x01,0x21,0x17,0x18,0xEA,0x4F,0x2C,0x64,0x3F,0x59,0x2B,0x17,0x4B,0x36,0x4E,0x10,0x5E,0x5D,0x2A,0x2D,0x5A,0x61,0x3B,0x18,0x4D,0x0D,0x11,0x44,0x4C,0x31,0x50,0x01,0xE3,0x02,0x06,0x00,0x34,0x09,0x06,0xD5,0x05,0xB9,0x08,0x06,0x00,0x43,0x09,0x00,0x2E,0x09,0x00,0x65,0x09,0x04,0xE3,0x06,0xD6,0x05,0xC4,0x08,0x04,0x00,0xF9,0x08,0x05,0x72,0x09,0x01,0x00,0x9A,0x09,0x04,0xDA,0x06,0xD9,0x00,0xD3,0x0C,0x05,0x4A,0x08,0x03,0x3D,0x09,0x03,0x56,0x02,0x06,0xD8,0x05,0xD1,0x09,0x03,0x23,0x09,0x00,0x06,0x02,0x00,0xB6,0x01,0x00,0x30,0x09,0x00,0x5B,0x06,0x00,0x47,0x07,0x05,0x44,0x08,0x2B,0x22,0x26,0x40,0x21,0x00,0x00,0x00,0x22,0x15,0x40,0x21,0x19,0x40,0xCB,0x6E,0x28,0x07,0xCB,0xBE,0x46,0xDF,0xC3,0x89,0x08,0xCB,0xFE,0xE7,0xCD,0x79,0x06,0x38,0x06,0xD9,0x11,0xF0,0xD8,0x19,0xD9,0xDC,0xAE,0x08,0xCD,0x1A,0x00,0xFD,0xCB,0x19,0xBE,0x01,0x00,0x00,0xED,0x43,0x22,0x40,0xFE,0x76,0xC8,0x4F,0xE7,0x79,0xD6,0xE6,0x38,0xE5,0x4F,0x21,0x52,0x07,0x09,0x4E,0x09,0x18,0x03,0x2A,0x1A,0x40,0x7E,0x23,0x22,0x1A,0x40,0x01,0x09,0x08,0xC5,0x4F,0x17,0x38,0x0D,0x21,0x36,0x08,0x06,0x00,0x09,0x4E,0x09,0xE5,0xCD,0x1A,0x00,0xC9,0xCD,0x1A,0x00,0xFE,0xD5,0x20,0x04,0xFD,0xCB,0x19,0xFE,0xB9,0x20,0x7A,0xE7,0xC9,0x1F,0x33,0x4D,0x17,0x64,0x1B,0x6C,0xFD,0xCB,0x01,0x7E,0xC0,0xC1,0x7E,0xFE,0x76,0xC4,0xAE,0x08,0x7E,0xFE,0x76,0xC8,0xE7,0x18,0xFA,0xFE,0x76,0xC4,0xA8,0x08,0xBF,0xC1,0xCC,0x3D,0x08,0xEB,0x2A,0x1A,0x40,0x4E,0x23,0x46,0xEB,0xC5,0xED,0x4B,0x22,0x40,0x78,0xB1,0xC9,0xCD,0x14,0x0D,0x30,0x3F,0xFD,0xCB,0x01,0x7E,0xCA,0xAD,0x0A,0x22,0x20,0x40,0xFD,0xCB,0x01,0xBE,0xCD,0xAD,0x0A,0xFD,0xCB,0x01,0xFE,0xC9,0xC1,0xFD,0x46,0x01,0xC5,0xEF,0xD1,0x01,0x3D,0x0C,0x3A,0x01,0x40,0xCB,0x7F,0x20,0xCC,0xAA,0xE6,0x40,0xC4,0xAE,0x08,0x18,0xA5,0x22,0x20,0x40,0xCD,0x14,0x0D,0x30,0x08,0xDF,0xC9,0xEF,0xFD,0xCB,0x01,0x76,0xC0,0x3A,0x15,0x40,0xFD,0xB6,0x16,0xC0,0x22,0x15,0x40,0xC9,0x20,0x06,0xFD,0xCB,0x01,0x7E,0x20,0x89,0xC3,0xE8,0x07,0xC5,0xCD,0xA8,0x08,0xC1,0xCD,0x3D,0x08,0x2A,0x22,0x40,0xE5,0xCD,0x3D,0x0C,0xC1,0xFD,0xCB,0x00,0x7E,0xC8,0xC5,0x2B,0xCB,0x7E,0xCB,0xFE,0x23,0x23,0x20,0x07,0x01,0x04,0x00,0x23,0xCD,0xD5,0x05,0x23,0xD1,0x73,0x23,0x72,0x23,0xED,0x5B,0x02,0x40,0x13,0x73,0x23,0x72,0xC9,0x2A,0x20,0x40,0xCD,0x3B,0x0B,0xFD,0xCB,0x00,0x7E,0xC8,0xEB,0x2B,0x2B,0xCB,0x7E,0x28,0x16,0x13,0x23,0x73,0x23,0x72,0x23,0x4E,0x23,0x46,0xC5,0xE3,0xCD,0xCD,0x0D,0xE1,0xD8,0x23,0x4E,0x23,0x46,0x18,0x13,0xCF,0x00,0x20,0x04,0xED,0x4B,0x1E,0x40,0xED,0x43,0x1C,0x40,0xC9,0xCF,0x08,0xED,0x4B,0x17,0x40,0xED,0x43,0x02,0x40,0xFD,0xCB,0x01,0xDE,0xC9,0xCD,0x34,0x09,0xC3,0x5B,0x06,0x2A,0x02,0x40,0x23,0xE3,0xE5,0xCD,0x34,0x09,0x01,0x06,0x00,0x2A,0x10,0x40,0x09,0xEB,0x2A,0x25,0x40,0x67,0x3E,0x13,0x85,0x6F,0x7C,0x26,0x00,0x19,0xED,0x72,0xD8,0xCF,0x03,0xE1,0xC1,0xE5,0x78,0xFE,0x3F,0x20,0xC7,0xE1,0xC5,0xE5,0xCF,0x06,0x7E,0xFE,0x76,0xCA,0x1B,0x07,0xD6,0xD8,0xCE,0x00,0x28,0x13,0xEF,0xCD,0xF1,0x06,0xCD,0x1A,0x00,0xD6,0xD8,0xCE,0x00,0x28,0x06,0xCD,0x3D,0x08,0xC3,0x1B,0x07,0xD4,0x27,0x07,0xE7,0xFE,0x76,0xC8,0x18,0xDE,0xFD,0xCB,0x03,0x7E,0x20,0x2F,0xE1,0x21,0x19,0x40,0xCB,0xEE,0xCB,0xB6,0x3A,0x01,0x40,0xE6,0x40,0x01,0x02,0x00,0x20,0x02,0x0E,0x04,0xB6,0x77,0xF7,0xD0,0x36,0x76,0x79,0x0F,0x0F,0x38,0x03,0x12,0x2B,0x77,0x2B,0x36,0xB0,0x3A,0x25,0x40,0x3C,0x32,0x12,0x40,0xC3,0xF7,0x02,0xCF,0x07,0xC5,0xEF,0xD1,0xCD,0x3D,0x08,0x3A,0x22,0x40,0xFD,0xCB,0x00,0x7E,0xC8,0x12,0xC9,0x48,0xC5,0xCD,0x18,0x0D,0x38,0x3C,0x01,0x00,0x09,0x51,0x59,0xD6,0xDC,0x28,0x26,0x1B,0x06,0x04,0x3C,0x28,0x20,0x3C,0x28,0x22,0xFE,0x27,0x20,0x10,0xFD,0xCB,0x01,0xB6,0x23,0x22,0x22,0x40,0xDF,0x3D,0x28,0x17,0xFE,0x75,0x20,0xF8,0xCD,0xAE,0x08,0xD9,0x01,0x00,0x00,0x18,0x35,0xD5,0xC5,0xE7,0x18,0xC7,0xCD,0x49,0x00,0x18,0x16,0xDF,0x18,0x13,0xFE,0x26,0x38,0x05,0xCD,0xAD,0x0A,0x18,0x0A,0xCD,0x79,0x06,0xDC,0xAE,0x08,0xFD,0xCB,0x01,0xF6,0xCD,0x1A,0x00,0xD9,0x01,0x00,0x00,0xD6,0xDC,0x38,0x0A,0xFE,0x0A,0x30,0x06,0x4F,0x21,0xA3,0x0A,0x09,0x46,0xD1,0x7A,0xB8,0x38,0x37,0xA7,0xD9,0xC8,0xD9,0xFD,0xCB,0x01,0x7E,0x28,0x14,0x16,0x00,0x21,0x1F,0x0D,0x19,0x19,0x5E,0x23,0x56,0x21,0x7F,0x0A,0xE3,0xD5,0xED,0x5B,0x22,0x40,0xC9,0x7B,0xFE,0x0A,0x1F,0x1F,0xFD,0xAE,0x01,0xE6,0x40,0xD9,0xC4,0xAE,0x08,0xD9,0xE1,0x22,0x22,0x40,0xFD,0xCB,0x01,0xF6,0x18,0xC4,0xD5,0x79,0xFD,0xCB,0x01,0x76,0x20,0x0A,0xC6,0x03,0x4F,0xFE,0x0A,0xD9,0xDC,0xAE,0x08,0xD9,0x2A,0x22,0x40,0xE5,0xC5,0xD9,0xC3,0x19,0x0A,0x06,0x06,0x08,0x07,0x03,0x02,0x0A,0x05,0x05,0x05,0xE5,0x21,0x01,0x40,0xCB,0xAE,0xCB,0xF6,0xDF,0xFE,0x0D,0xCA,0x30,0x0B,0xFE,0xDA,0xCA,0x2B,0x0B,0xCD,0x18,0x0D,0x30,0x03,0xDF,0x18,0xF8,0xFE,0xDA,0x28,0x0A,0xFE,0x0D,0xC2,0x35,0x0B,0xDF,0xFE,0xDA,0x20,0x51,0x11,0xBF,0x0B,0xE1,0xE5,0x4E,0xCD,0x55,0x00,0x13,0x1A,0xB9,0x28,0xF7,0xE6,0x3F,0xB9,0x20,0x05,0x3E,0xDA,0xBE,0x28,0x0B,0x1A,0xA7,0x28,0x35,0x13,0x17,0x30,0xF8,0x13,0x18,0xE0,0xD5,0xCD,0x49,0x00,0xD1,0xE3,0x21,0x01,0x40,0x1A,0xAE,0xE6,0x40,0x20,0x1F,0xCB,0xEE,0xCB,0xF6,0x1A,0xE6,0x3F,0xFE,0x0D,0x20,0x02,0xCB,0xB6,0xCB,0x7E,0xE1,0xC8,0x21,0xBA,0x0B,0xE5,0xEB,0x23,0x5E,0x23,0x56,0xD5,0x2A,0x22,0x40,0xC9,0xE1,0xC3,0xAE,0x08,0xCD,0x49,0x00,0x18,0x05,0xFD,0xCB,0x01,0xB6,0xDF,0xE1,0xFD,0xCB,0x01,0x7E,0xC8,0x4E,0x23,0x7E,0xE5,0xFE,0xDA,0x20,0x19,0xC5,0xED,0x4B,0x26,0x40,0xC5,0xCD,0x25,0x00,0xE1,0x22,0x26,0x40,0xC1,0x21,0x00,0x40,0xCB,0x7E,0x20,0x13,0x36,0x02,0xE1,0xC9,0xCB,0xA9,0xFE,0x0D,0x28,0x09,0xCB,0xF1,0xCD,0x18,0x0D,0x38,0x02,0xCB,0xE9,0x2A,0x08,0x40,0x7E,0xE6,0x7F,0xCA,0xD0,0x0C,0xB9,0x20,0x1C,0x17,0x87,0xFA,0xA4,0x0B,0x30,0x3A,0xD1,0xD5,0xE5,0x23,0x1A,0x13,0xBE,0x28,0xFA,0xF6,0x80,0xBE,0x20,0x06,0x1A,0xCD,0x18,0x0D,0x30,0x09,0xE1,0xC5,0xCD,0x24,0x06,0xEB,0xC1,0x18,0xD3,0xD1,0xD1,0x23,0x5E,0x23,0x56,0xEB,0x18,0x16,0x38,0xF6,0xE3,0x2A,0x22,0x40,0xCB,0x04,0xD1,0x20,0x0F,0x13,0x1A,0xBD,0x38,0x0A,0x29,0x19,0x18,0xE5,0xD1,0x23,0x22,0x22,0x40,0xC9,0xCF,0x02,0x35,0x2A,0x2A,0xF0,0x24,0x0C,0x28,0x2D,0x37,0xCD,0x28,0x0C,0x28,0x34,0x29,0xAA,0x24,0x0C,0x37,0x33,0xE9,0xED,0x0B,0x39,0x31,0x8D,0x38,0x0C,0x3A,0x38,0xF7,0xF0,0x06,0x38,0x39,0x37,0xCD,0x10,0x0C,0x26,0x27,0xF8,0xF2,0x0D,0x00,0xE5,0x2A,0x1C,0x40,0x11,0x4D,0x00,0x7C,0xB5,0x28,0x0B,0xCD,0x55,0x0D,0xA7,0xED,0x42,0x30,0x05,0x23,0x18,0x02,0xED,0x52,0x22,0x1C,0x40,0xD1,0xCD,0x55,0x0D,0x60,0x69,0x23,0xC9,0xD9,0x01,0x07,0x00,0xF7,0x30,0x1D,0xD5,0xD9,0x44,0x4D,0xCD,0xA1,0x06,0xD9,0x3E,0x01,0x12,0xE1,0xC9,0x6E,0x26,0x00,0xC9,0x01,0x02,0x00,0x7D,0xF7,0x30,0x05,0x36,0x01,0x2B,0x77,0xC9,0x21,0x30,0x0C,0xC9,0x7E,0x3D,0xC8,0x23,0xC9,0xFD,0xCB,0x00,0x7E,0xC8,0xC5,0x2A,0x20,0x40,0xCD,0x3B,0x0B,0x21,0x00,0x40,0x7E,0xFE,0x02,0x28,0xD1,0x17,0xFD,0xCB,0x01,0x76,0x38,0x3B,0x36,0xFF,0x28,0x47,0x2A,0x20,0x40,0x01,0x02,0x00,0x03,0x23,0x7E,0xCD,0x18,0x0D,0x38,0xF8,0xFE,0xDA,0x28,0x62,0xF7,0x30,0xB1,0xD5,0x2A,0x20,0x40,0x0B,0x0B,0x0B,0x1B,0x78,0xB1,0x3E,0x40,0x28,0x08,0xED,0xB0,0x7E,0xF6,0x80,0x12,0x3E,0x60,0xE1,0xCD,0xB9,0x0C,0xEB,0x1B,0xE1,0xEB,0x72,0x2B,0x73,0xC9,0x20,0xF8,0xE1,0xCD,0xA4,0x0C,0x2A,0x22,0x40,0x2B,0xCD,0x24,0x06,0xC3,0x66,0x06,0xE1,0x3E,0x01,0x01,0x01,0x00,0xBE,0x23,0x03,0x20,0xFB,0xE5,0xF7,0xEB,0xE1,0xD0,0xED,0xB8,0xEB,0x23,0x3E,0xA0,0xEB,0x2A,0x20,0x40,0xAE,0xEB,0xF5,0xCD,0x0D,0x0D,0xF1,0x2B,0x77,0x2A,0x0C,0x40,0x22,0x0A,0x40,0x2B,0x36,0x80,0xC9,0xE1,0xCF,0x01,0xA0,0xC2,0xBE,0x0B,0xC5,0x60,0x69,0x23,0x23,0x29,0x44,0x4D,0xF7,0xD2,0x22,0x0C,0x2B,0x54
,0x5D,0x1B,0x0B,0x0B,0x36,0x00,0xED,0xB8,0xC1,0x71,0x3E,0x80,0x18,0xC6,0x2A,0x0A,0x40,0xE5,0x2A,0x0C,0x40,0x2B,0xCD,0xD5,0x05,0x23,0x23,0xC1,0xED,0x43,0x0A,0x40,0xC1,0xEB,0x23,0x37,0xC9,0x2A,0x0C,0x40,0xED,0x5B,0x0A,0x40,0xC3,0x63,0x06,0xFE,0x26,0x18,0x02,0xFE,0x1C,0x3F,0xD0,0xFE,0x40,0xC9,0x39,0x0D,0x3E,0x0D,0x44,0x0D,0x90,0x0D,0xB5,0x0D,0xBC,0x0D,0x70,0x0D,0xC3,0x0D,0xCC,0x0D,0xCD,0x0D,0xD9,0x0D,0xDF,0x0D,0xDE,0x0D,0xA7,0xED,0x52,0x18,0x03,0xA7,0xED,0x5A,0xE0,0xCF,0x05,0xCD,0xED,0x0D,0xC5,0x08,0xCD,0x55,0x0D,0x20,0x3F,0xC1,0x08,0x1F,0xD0,0xC3,0xF6,0x0D,0x44,0x4D,0x3E,0x10,0x21,0x00,0x00,0x29,0xCB,0x11,0xCB,0x10,0x30,0x04,0x19,0x30,0x01,0x03,0x3D,0x20,0xF2,0x7C,0xE6,0x80,0xB0,0xB1,0xC9,0xCB,0x7A,0x20,0xCE,0xAF,0xCD,0xF2,0x0D,0xA3,0x08,0xC5,0x42,0x4B,0xEB,0x21,0x01,0x00,0x0B,0xCB,0x78,0x20,0xC8,0xC5,0xCD,0x55,0x0D,0xC1,0x28,0xF4,0xC1,0x18,0xB2,0x7A,0xB3,0x28,0xAE,0xCD,0xED,0x0D,0xC5,0x1F,0xED,0x6A,0x7C,0x4D,0x21,0x00,0x00,0x06,0x10,0xED,0x6A,0xED,0x52,0x30,0x01,0x19,0xCB,0x11,0x17,0x10,0xF4,0x67,0x69,0x23,0xC1,0xD8,0x18,0x41,0x7C,0xA2,0x67,0x7D,0xA3,0x6F,0xC9,0x7C,0xB2,0x67,0x7D,0xB3,0x6F,0xC9,0xA7,0xED,0x52,0x21,0xFF,0xFF,0xC8,0x23,0xC9,0xEB,0xA7,0xED,0x52,0x7C,0x17,0xE2,0xD6,0x0D,0x3F,0xED,0x62,0xC9,0xCD,0xE4,0x0D,0x18,0xE8,0xEB,0xCD,0xE4,0x0D,0x18,0xF2,0x1A,0xBE,0xC0,0x3D,0xC8,0x13,0x23,0x18,0xF7,0xAF,0xCD,0xF1,0x0D,0xEB,0xCB,0x7C,0xC8,0x3C,0x08,0x7C,0x2F,0x67,0x7D,0x2F,0x6F,0x23,0x08,0xC9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,0x14,0x00,0x00,0x00,0x00,0x00,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xF0,0xF0,0xF0,0xF0,0x00,0x00,0x00,0x00,0x0F,0x0F,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xF0,0xF0,0xF0,0x00,0x00,0x00,0x00,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0xF0,0xF0,0xF0,0xF0,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,0x00,0x00,0x00,0x00,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,0x00,0x00,0x00,0x00,0x00,0x1E,0x21,0x78,0x20,0x20,0x7F,0x00,0x00,0x08,0x3E,0x48,0x3E,0x09,0x3E,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x3E,0x41,0x06,0x08,0x00,0x08,0x00,0x00,0x04,0x08,0x08,0x08,0x08,0x04,0x00,0x00,0x10,0x08,0x08,0x08,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x3E,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x3E,0x08,0x08,0x00,0x00,0x00,0x2A,0x1C,0x08,0x1C,0x2A,0x00,0x00,0x00,0x02,0x04,0x08,0x10,0x20,0x00,0x00,0x00,0x00,0x3E,0x00,0x3E,0x00,0x00,0x00,0x00,0x10,0x08,0x04,0x08,0x10,0x00,0x00,0x00,0x04,0x08,0x10,0x08,0x04,0x00,0x00,0x00,0x08,0x00,0x00,0x08,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x0C,0x0C,0x00,0x00,0x1C,0x22,0x41,0x41,0x22,0x1C,0x00,0x00,0x0C,0x14,0x04,0x04,0x04,0x1E,0x00,0x00,0x3E,0x41,0x01,0x3E,0x40,0x7F,0x00,0x00,0x3E,0x41,0x06,0x01,0x41,0x3E,0x00,0x00,0x0C,0x14,0x24,0x44,0x7F,0x04,0x00,0x00,0x7F,0x40,0x7E,0x01,0x41,0x3E,0x00,0x00,0x3E,0x40,0x7E,0x41,0x41,0x3E,0x00,0x00,0x7F,0x01,0x02,0x04,0x08,0x08,0x00,0x00,0x3E,0x41,0x3E,0x41,0x41,0x3E,0x00,0x00,0x3E,0x41,0x41,0x3F,0x01,0x3E,0x00,0x00,0x3E,0x41,0x41,0x7F,0x41,0x41,0x00,0x00,0x7E,0x41,0x7E,0x41,0x41,0x7E,0x00,0x00,0x1E,0x21,0x40,0x40,0x21,0x1E,0x00,0x00,0x7C,0x42,0x41,0x41,0x42,0x7C,0x00,0x00,0x7F,0x40,0x7C,0x40,0x40,0x7F,0x00,0x00,0x7F,0x40,0x7C,0x40,0x40,0x40,0x00,0x00,0x1E,0x21,0x40,0x47,0x21,0x1E,0x00,0x00,0x41,0x41,0x7F,0x41,0x41,0x41,0x00,0x00,0x3E,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,0x02,0x02,0x02,0x42,0x22,0x1C,0x00,0x00,0x42,0x44,0x78,0x44,0x42,0x41,0x00,0x00,0x40,0x40,0x40,0x40,0x40,0x7F,0x00,0x00,0x41,0x63,0x55,0x49,0x41,0x41,0x00,0x00,0x61,0x51,0x49,0x45,0x43,0x41,0x00,0x00,0x3E,0x41,0x41,0x41,0x41,0x3E,0x00,0x00,0x7E,0x41,0x41,0x7E,0x40,0x40,0x00,0x00,0x3E,0x41,0x41,0x49,0x45,0x3E,0x00,0x00,0x7E,0x41,0x41,0x7E,0x44,0x42,0x00,0x00,0x3E,0x40,0x3E,0x01,0x41,0x3E,0x00,0x00,0x7F,0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x41,0x41,0x41,0x41,0x41,0x3E,0x00,0x00,0x41,0x41,0x41,0x22,0x14,0x08,0x00,0x00,0x41,0x41,0x41,0x49,0x55,0x22,0x00,0x00,0x21,0x12,0x0C,0x0C,0x12,0x21,0x00,0x00,0x41,0x22,0x1C,0x08,0x08,0x08,0x00,0x00,0x7F,0x02,0x04,0x08,0x10,0x7F,0x00];// START src/js/zx80/mosaic.js
// NUL
// START src/js/zx80/system.js
/**
 * 
 * @constructor
 */
zx.zx80 = function(surface, scale) {
	zx.system = this;
	zx.system.surface = surface;

	this.memory = Array.apply(null, Array(16 * 1024)).map(function (x, i) { return 0; })
	this.rom = zx.rom;
	this.mosaic = zx.mosaic;

	zx.peek = function(addr) {
		addr = addr & 0xffff;
		if (addr < 4 * 1024) {
			return this.rom[addr];
		}
		return this.memory[addr - 4 * 1024];
	}.bind(this);

	zx.poke = function(addr, value) {
		var ram_at = 4 * 1024;
		addr = addr & 0xffff;
		if (addr >= ram_at) {
			this.memory[addr - ram_at] = value;
			// @TODO: If in the screen area
			// @TODO : if 118 do a CR
		}
	}.bind(this);

	zx.usr = function(value) {};

	// Conceptually, any character >= 256 is a treated as a zx80-specific one while
	// anything lower is ASCII. This allows us to use normal javascript,
	// e.g. var s = "hello" + zx.chr$(7)
	// with both JS-friendly stuff, and zx-specifics without them colliding
	zx.code = function(character) {
		var ascii = sgxASCII(character);
		if (ascii >= 256) {	// already in ZX
			return ascii;
		}

		ascii -= 32;

		if (ascii < 0 || ascii >= this.mapASCII2ZX.length) {
			ascii = 15;	// map to ?
		}
		var chr = this.mapASCII2ZX[ascii];
		return chr | 256;
	}.bind(this);

	// As a consequence of creating the ZX/non-ZX division, we have everything from chr$
	// as a ZX-character
	zx.chr$ = function(code) {
		return sgxToCharacter(code | 256);
	};

	zx.inverse = function(text) {
		var output = "";
		for(var i=0;i<text.length;++i) {
			output += zx.chr$(zx.code(text[i]) + 128);
		}
		return output;
	}.bind(this);


	this.scale = scale || 1;
	this.timecum = 0;

	this.zxWidth = 32;
	this.zxHeight = 24;
	this.zxWidthPixels = 32*8;
	this.zxHeightPixels = 24*8;
	var zxwidth = this.zxWidth * 8 * this.scale;
	var zxheight = this.zxHeight * 8 * this.scale;

	this.screenRC = new sgxRect2f();
	this.screenRC.top = (surface.getHeight() - zxheight) / 2;
	this.screenRC.left = (surface.getWidth() - zxwidth) / 2;
	this.screenRC.right = this.screenRC.left + zxwidth;
	this.screenRC.bottom = this.screenRC.top + zxheight;

	this.border = [];
	this.border[0] = new sgxRect2f(0,0, surface.getWidth(), this.screenRC.top);// top
	this.border[1] = new sgxRect2f(0,this.screenRC.top, this.screenRC.left, surface.getHeight()-this.screenRC.top);// left
	this.border[2] = new sgxRect2f(this.screenRC.left+zxwidth,this.screenRC.top, surface.getWidth()-(this.screenRC.left+zxwidth), surface.getHeight()-this.screenRC.top);//right
	this.border[3] = new sgxRect2f(this.screenRC.left,this.screenRC.top+zxheight, zxwidth, surface.getHeight()-(this.screenRC.top+zxheight));
	

	// !"#$%&'()*+,-./
	//0123456789
	//:;<=>?@
	//AB...
	//[\]^_`
	//abcde..
	//{|}~
	var NIL=15;
	this.mapASCII2ZX = [
		0, NIL, 1,12,13,NIL,NIL,NIL,16,17,20,19,26,18,27,21,
		28,29,30,31,32,33,34,35,36,37,
		14,25,24,22,23,15,NIL,
		38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,
		NIL,NIL,NIL,NIL,NIL,NIL,
		38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,
		NIL,NIL,NIL,NIL,NIL,		
	];

	this.gfxBlack = zx.udg([0,0,0,0,0,0,0,0]);

	this.palette = [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]];

	this.font = [];
	for(var i=0;i<64;++i) {
		this.font[i] = zx.Texture.create8x8(this.rom, 0xe00 + i*8);
		this.font[i+128] = zx.Texture.create8x8(this.rom, 0xe00 + i*8, true);
	}

	this.screen = new zx.screen(this);
	this.audio = new zx.audio(this);
}

zx.zx80.prototype.cls = function() {
	this.surface.setFillColor(sgxColorRGBA.White);
	this.surface.setFillTexture(NULL);
	this.surface.fillRect(this.screenRC);
}

zx.zx80.prototype.updateCharacter = function(chr, udg) {
}

zx.zx80.prototype.getCharacterWidth = function(chr) {
	var t = this.getCharacterTexture(chr);
	return t ? t.getWidth() : 0;
}

zx.zx80.prototype.getCharacterHeight = function(chr) {
	var t = this.getCharacterTexture(chr);
	return t ? t.getHeight() : 0;
}


zx.zx80.prototype.getCharacterTexture = function(chr) {

	if (chr < 256) {
		// Map ASCII to our font
		// e.g. space = asc:32 = 0, " = asc 34 : 11
		chr = this.mapASCII2ZX[chr - 32];

	} else {	// we're in ZX-format
		chr = chr - 256;
	}

	var texture =  this.font[chr];

	if (chr < 0 | chr >= this.font.length || !this.font[chr]) {
		return this.font[15];	// The ? symbol
	}

	return this.font[chr];
}


zx.zx80.prototype.drawCharacter = function(chr, attr, x, y) {
	return this.drawWith(this.getCharacterTexture(chr), attr, x, y);
}



zx.zx80.prototype.drawWith = function(gfx, attr, x, y) {
	if (gfx === undefined || attr === undefined) {
		return;
	}
	
	var switch_colours = attr.flash && (this.flashPulse != attr.inverse);
	var width = gfx.paper.getWidth();
	var height = gfx.paper.getHeight();
	var rc = new sgxRect2f(this.screenRC.left + x*this.scale, this.screenRC.top + y*this.scale, width*this.scale, height*this.scale);

	this.surface.setClipRect(this.screenRC);
	this.surface.setFillColor(sgxColorRGBA.Black);
	this.surface.setFillTexture(gfx.ink);
	this.surface.fillRect(rc);
}
// @todo recomputeSurface(surface);
// @todo use surface

zx.zx80.prototype.draw = function(surface) {
	this.surface.setFillColor(sgxColorRGBA.White);
	this.surface.setFillTexture(NULL);
	
	this.surface.setClipRect(NULL);
	for(var i=0;i<4;++i) {
		this.surface.fillRect(this.border[i]);
	}
}

// http://www.worldofzx80.org/ZXBasicManual/zxmanchap17.html
zx.zx80.prototype.plot = function(x, y) {
	this.surface.setClipRect(this.screenRC);

	if (x >= 0 && y >= 0 && x < 64 && y < 44) {
		var rc = new sgxRect2f();
		rc.left = this.toX(sgxFloor(x)*4);
		rc.top = this.toY(sgxFloor(44-y)*4);

		rc.right = rc.left + 4*this.scale;
		rc.bottom = rc.top + 4*this.scale;

		this.surface.setFillTexture(this.font[64].ink);
		this.surface.fillRect(rc);
	}
}

zx.zx80.prototype.drawPoint = function(x, y) {
}

zx.zx80.prototype.toX = function(x) {
	return this.screenRC.left + x*this.scale;
}

zx.zx80.prototype.toY = function(y) {
	return this.screenRC.top + y*this.scale;
}

zx.zx80.prototype.drawLineWith = function(attr, x1, y1, x2, y2) {
}

zx.zx80.prototype.drawLine = function(x1, y1, x2, y2) {
}

zx.zx80.prototype.circle = function(x, y, r) {
}


zx.zx80.prototype.update = function(telaps) {
}

zx.zx80.prototype.getRGB = function(index, bright) {}

zx.zx80.prototype.setBorderColor = function(colour) {}
zx.zx80.prototype.setInkColor = function(colour) {}
zx.zx80.prototype.setPaperColor = function(colour) {}
zx.zx80.prototype.setBright = function(bright) {}
zx.zx80.prototype.setFlash = function(flash) {}
// START src/js/texture.js

zx.Texture = function(width, height, data, offset, inverse) {
	this.ink = this.createtexture(width, height, 1, data, offset, inverse);
	this.paper = this.createtexture(width, height, 0, data, offset, inverse);
}

zx.Texture.create8x8 = function(data, offset, inverse) {
	return new zx.Texture(8, 8, data, offset, inverse);
}

zx.Texture.create16x16 = function(data, offset, inverse) {
	return new zx.Texture(16, 16, data, offset, inverse);
}


zx.Texture.prototype.getWidth = function() {
	return this.ink.getWidth();
}

zx.Texture.prototype.getHeight = function() {
	return this.ink.getHeight();
}

zx.Texture.prototype.createtexture = function(width, height, ink_not_paper, data, offset, inverse) {
	var texture = sgx.graphics.TextureManager.get().create("", width, height);
	var imageData = [];
	texture.lock(imageData);
	var bitmap = imageData.pBitmap_;

	var bit = 0;
	var shift = 7;
	var xpos = 0;
	var pi = 0;
	var setbit = inverse ? 0 : 1;
	var clrbit = inverse ? 1 : 0;

	var idx = offset - 1;
	for(var i=0;i<width*height;++i) {
		bit >>= 1;
		if (bit == 0) {
			bit = 0x80;
			++idx;
		}

		var isset = (data[idx] & bit) ? setbit : clrbit;

		bitmap[pi + 0] = bitmap[pi + 1] = bitmap[pi + 2] = isset==ink_not_paper?0xff:0;
		bitmap[pi + 3] = isset==ink_not_paper ? 0xff : 0;
		pi += 4;
	}

	texture.unlock(imageData);

	texture.clearRegions();
	texture.addPixelRegion(0,0,width,height);

	return texture;
}
// START src/js/libstd.js
zx.TO = "TO";
zx.SEMICOLON = ';';

zx.bin = function(binary) {
	if (binary.substring(0,1) == "%") {
		binary = binary.substring(1);
	}
	return parseInt(binary, 2);
}

zx.hex = function(hex) {
	if (hex.substring(0,2) == "0x" || hex.substring(0,2) == "0X") {
		hex = hex.substring(2);
	} else if (hex.substring(0,1) == "$" || hex.substring(0,1) == "#") {
		hex = hex.substring(1);
	}
	return parseInt(binary, 16);
}

zx.pause = function(seconds) {
// was 'number of frames of TV signal'
	var currentTime = new Date().getTime();

	while (currentTime + 1000*seconds >= new Date().getTime()) {
		// nop
	}
}

zx.inkey$ = function() {
// @todo
	return "";
}

zx.copy = function() {
	// @TODO Grab surface and upload to imgur
}


// START src/js/libmath.js


zx.abs = function(v) {
	return sgxAbs(v);
}

zx.acs = function(v) {
	return sgxACos(v);
}

zx.asn = function(v) {
	return sgxASin(v);
}

zx.atn = function(v) {
	return sgxAtan(v);
}


// Spectrum only!?
zx.code = function(v) {
	if (v === undefined || v == '') {
		return 0;
	}
	return sgxASCII(v[0]);
}

zx.cos = function(v) {
	return sgxCos(v);
}


zx.ln = function(v) {
// @todo
	return sgxLn(v);
}

zx.randomize = function(v) {
// @todo
	sgxRand(v === undefined ? 0:v);
}

zx.rnd = function() {
	return sgxRand();
}

zx.sgn = function(v) {
	return sgxSgn(v);
}

zx.sqr = function(v) {
	return sgxSqr(v);
}

zx.sin = function(v) {
	return sgxSin(v);
}

zx.pi = function() {
	return SGX_PI;
}

zx.int = function(v) {
	return sgxFloor(v);
}

zx.exp = function(v) {
	// @todo : calculate e ^ v
   return sgxExp(v);
}


// START src/js/libstring.js

zx.code = function(character) {
	return sgxASCII(character);
}

zx.chr$ = function(code) {
	return sgxToCharacter(code);
}

zx.inkey$ = function() {
// @todo
	return "";
}

zx.len = function(v) {
	return sgxStrlen(v);
}


zx.val = function(v) {
	return sgxAtoi(v);
}

zx.val$ = function(v) {
	return "" + sgxAtoi(v);
}

zx.str$ = function(v) {
	return sgxToCharacter(v);
}



zx.$ = function(value, a, b, c) {
	// An equivalent to RESULT = VAR$(x TO y) where x and y are optional
	
	// If only the var is given, we probably want to just return the var
	// as it doesn't make sense
	if (a === undefined) {
		return value;
	}


	// First param is TO, so this means 'start from the beginning'
	if (a === zx.TO) {
		first = 0;
		if (b === undefined) {		// $(v,TO) - i.e. all of it
			return value;
		} else {					// $(v,TO,4) - LEFT$
			return value.substr(0, b);
		}
	} else {
		if (b === undefined) {		// $(v,1) - single character
			return value.substr(a, 1);
		} else if (b != zx.TO) {	// $(v,1,3) - non-standard, but assume range
			return value.substr(a, b-a);
		} else if (c === undefined) {	// $(v,1,TO)	- 1st character given
			return value.substr(a);
		} else {					// $(v,1,TO,3)	- 1st & last characters given
			return value.substr(a, c-a);
		}
	}

	// assert
	return "";
}

// START src/js/libgfx.js

zx.udg = function(a,b,c,d,e,f,g,h) {
	if( Object.prototype.toString.call( a ) === '[object Array]' ) {
		if (b === undefined) {
			b = 0;
		}
		return zx.Texture.create8x8(a, b);
	} else {
		return zx.Texture.create8x8([a,b,c,d,e,f,g,h], 0);
	}
}


// START src/js/attribute.js

function zxAttribute(attr) {
	this.ink = attr & 0x07;
	this.paper = (attr & 0x38) >> 3;
	this.bright = (attr & 0x40) ? 1 : 0;
	this.flash = attr & 0x80;
	this.inverse = false;
	//
	this.inkColor = new sgxColorRGBA();
	this.paperColor = new sgxColorRGBA();
	//
	this.recompute();
}

zxAttribute.prototype.setBright = function(state) {
	this.bright = state ? 1 : 0;
	this.recompute();
}

zxAttribute.prototype.setInk = function(color) {
	this.ink = color & 0x07;
	this.recompute();
}

zxAttribute.prototype.setPaper = function(color) {
	this.paper = color & 0x07;
	this.recompute();
}

zxAttribute.prototype.setFlash = function(flash) {
	this.flash = flash ? true : false;
}

zxAttribute.prototype.recompute = function() {
	this.inkColor = new sgxColorRGBA(zx.system.palette[this.ink][this.bright]);
	this.paperColor = new sgxColorRGBA(zx.system.palette[this.paper][this.bright]);
}
	
// START src/js/audio.js
/**
 * 
 * @constructor
 */
zx.audio = function(system) {
	this.system = system;
    this.audioCtx = new(window.AudioContext || window.audioContext || window.webkitAudioContext);

    zx.beep = this.beep.bind(this);
}

zx.audio.prototype.beep = function(duration, pitch) {
    // The duration is given in seconds, and the pitch is given in semitones above middle C using negative numbers for notes below middle C.

	var oscillator = this.audioCtx.createOscillator();
    var gainNode = this.audioCtx.createGain();

    oscillator.connect(gainNode);
    gainNode.connect(this.audioCtx.destination);

	var key = pitch + 60;
	var frequency = 440 * Math.pow(2, (key-69) / 12);
    var volume = undefined;
    var callback = undefined;
    var type;

    if (volume){gainNode.gain.value = volume;};
    if (frequency){oscillator.frequency.value = frequency;}
    if (type){oscillator.type = type;}
    if (callback){oscillator.onended = callback;}

    oscillator.start();
    zx.pause(duration * 0.9);
    oscillator.stop();

    zx.pause(duration * 0.1);

    return this;
}
// START src/js/screen.js

/**
 * 
 * @constructor
 */
zx.screen = function(system) {
	this.system = system;

	this.afile = [];
	this.scrfile = [];
	for(var i=0;i<32*24;++i) {
		this.afile.push(0);//todo new zx.attribute());
		this.scrfile.push("");
	}

	this.state = {};
	this.currentAttribute = new zxAttribute(0x7);

	this.ink(zx.WHITE);
	this.paper(zx.BLACK);

	this.cls();
}

zx.screen.prototype.drawWith = function(gfx, attr, x, y) {
	this.system.drawWith(gfx, attr, x, y);
};

zx.screen.prototype.setAttribute = function(attr, x, y) {
if (typeof (attr) === 'zx.attribute') {
this.afile[x + y*32] = attr;
} else {
this.afile[x + y*32] = new zxAttribute(attr);
}

}

zx.screen.prototype.setScreen = function(chr, x, y) {
this.scrfile[x + y*32] = chr;
}


zx.screen.prototype.cls = function() {
this.system.cls();

for(var y=0;y<24;++y) {
for(var x=0;x<24;++x) {
this.setAttribute(new zxAttribute(0x7), x, y);
this.setScreen(' ', x, y);
}
}

this.lastX = this.lastY = 0;
this.lastPrintX = this.lastPrintY = 0;
}


// ink 8 and paper 8 are transparent : i.e. don't change the attrMap when writing text/plotting
// these are part of the screen state

// TODO: http://www.worldofspectrum.org/ZXBasicManual/zxmanchap16.html

zx.screen.prototype.border = function(colour) {
	this.system.setBorderColor(colour);
	return this;
}

zx.screen.prototype.ink = function(ink) {
	this.system.setInkColor(ink);
	// TODO remove current, and getInk
	this.currentAttribute.setInk(ink);
	return this;
}

zx.screen.prototype.paper = function(paper) {
	this.system.setPaperColor(paper);
	this.currentAttribute.setPaper(paper);
	return this;
}

zx.screen.prototype.bright = function(bright) {
	this.system.setBright(bright);
	this.currentAttribute.setBright(bright);
	return this;
}

zx.screen.prototype.flash = function(flash) {
	this.system.setFlash(flash);
	this.currentAttribute.setFlash(flash);
	return this;
}

zx.screen.prototype.plot = function(x, y) {
	// 0,0 is bottom left
	// draw in ink/paper with inverse/over
	// http://www.worldofspectrum.org/ZXBasicManual/zxmanchap17.html

	// @todo also on circle/draw
	var nx = sgxFloor(x/8);
	var ny = sgxFloor(y/8);
	this.setScreen('', nx, ny);

	this.system.plot(x, y);

	this.lastX = x;
	this.lastY = y;
}

zx.screen.prototype.draw = function(x, y) {
	// 0,0 is bottom left. 
	// Draws relative to last position
	this.system.drawLineWith(this.currentAttribute, this.lastX, this.lastY, this.lastX+x, this.lastY+y);
	this.lastX += x;
	this.lastY += y;
}

zx.screen.prototype.circle = function(x, y, r) {
	// 0,0 is bottom left
	this.system.drawCircle(x, y, r);

	this.lastX = x;
	this.lastY = y;
}



zx.screen.prototype.print = function(text, flags) {
	this.printAt(this.lastPrintY/8, this.lastPrintX/8, text, flags);
	return this;
}

zx.screen.prototype.printAt = function(y, x, text, flags) {
	// Lines are numbered from 0 (at the top) to 21, and columns from 0 (on the left) to 31.
	this.printFineAt(y * 8, x * 8, text);

	if (flags != zx.SEMICOLON) {
		this.lastPrintX = 0;
		this.lastPrintY += 8;
	}
	return this;
}

zx.screen.prototype.printFineAt = function(ypos, xpos, text) {
	if (!text) {	// blank line
		return;
	}

	var length = text.length;
	var x = xpos;
	var y = ypos;
// todo: setclip to non-border
	for(var i=0;i<text.length;++i) {
// NOTE: These characters are drawn in the current ink/paper settings
// NOTE: TODO: Add screen.paper(7) methods to change current state
// TODO: Each character written affects the attrmap
		var chr = zx.code(text[i]);
		this.system.drawCharacter(chr, this.currentAttribute, x, y);
		var width = this.system.getCharacterWidth(chr);
		x += width;	

		if (x >= 256) {
			x -= 256;
			y += this.system.getCharacterHeight(chr);

			// Re-draw if there's any overlap from RHS to LHS
			if (x && x < width) {
				this.system.drawCharacter(chr, this.currentAttribute, x-width, y);
			}			
		}
		
	}

	this.lastPrintX = x;
	this.lastPrintY = y;

	return this;
}


zx.screen.prototype.tab = function(column) {
	if (column*8 < this.lastPrintX) {
		this.lastPrintX = 0;
		this.lastPrintY += 8;
	}
	var spacing = (column % 31) - this.lastPrintX/8;
	// prints enough spaces to move the PRINT position to the column specified. 
	// It stays on the same line. or, if this would involve backspacing, moves on to 
	// the next one. Note that the computer reduces the column number 'modulo 32' 
	// (it divides by 32 and takes the remainder); so TAB 33 means the same as TAB 1.

	var spaces = " ".repeat(spacing);
	this.print(spaces, zx.SEMICOLON);
	return this;
}


